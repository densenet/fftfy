local fft = require("fft")

local SIZE = 32

local sine = {r = table.create(SIZE, 0), c = table.create(SIZE, 0) }
for i = 1, SIZE do
  sine.r[i] = math.sin(4*math.pi*i / SIZE)
end

local X = fft(sine)

local out = {}
for i = 1, SIZE do
  out[i] = string.format("(%.2f,%.2f)", X.r[i], X.c[i]) .. (if i % 8 == 0 then "\n" else "")
end
print("{" .. table.concat(out, ",") .. "}")

local x = fft(X, true, false, -1)

print("R: recovered input; I: initial input")
for i = 1, SIZE do
  out[i] = string.format("R:%.2f, I:%.2f", x.r[i], sine.r[i]) .. (if i % 2 == 0 then "\n" else "")
end
print(table.concat(out, "; "))

--[=[
{(-0.00,0.00),(-0.00,-16.00),(0.00,-0.00),(-0.00,-0.00),(-0.00,-0.00),(-0.00,-0.00),(0.00,-0.00),(0.00,-0.00)
,(0.00,0.00),(0.00,-0.00),(-0.00,0.00),(0.00,-0.00),(0.00,0.00),(-0.00,0.00),(-0.00,0.00),(-0.00,0.00)
,(-0.00,-0.00),(-0.00,-0.00),(0.00,-0.00),(0.00,0.00),(-0.00,-0.00),(0.00,0.00),(0.00,-0.00),(0.00,0.00)
,(0.00,0.00),(-0.00,0.00),(-0.00,0.00),(-0.00,0.00),(0.00,0.00),(-0.00,16.00),(-0.00,-0.00),(-0.00,0.00)
}
R: recovered input; I: initial input
R:0.38, I:0.38; R:0.71, I:0.71
; R:0.92, I:0.92; R:1.00, I:1.00
; R:0.92, I:0.92; R:0.71, I:0.71
; R:0.38, I:0.38; R:0.00, I:0.00
; R:-0.38, I:-0.38; R:-0.71, I:-0.71
; R:-0.92, I:-0.92; R:-1.00, I:-1.00
; R:-0.92, I:-0.92; R:-0.71, I:-0.71
; R:-0.38, I:-0.38; R:-0.00, I:-0.00
; R:0.38, I:0.38; R:0.71, I:0.71
; R:0.92, I:0.92; R:1.00, I:1.00
; R:0.92, I:0.92; R:0.71, I:0.71
; R:0.38, I:0.38; R:0.00, I:0.00
; R:-0.38, I:-0.38; R:-0.71, I:-0.71
; R:-0.92, I:-0.92; R:-1.00, I:-1.00
; R:-0.92, I:-0.92; R:-0.71, I:-0.71
; R:-0.38, I:-0.38; R:-0.00, I:-0.00



]=]
